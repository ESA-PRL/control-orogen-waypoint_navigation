name "waypoint_navigation"
version "0.1"

using_library "waypoint_navigation"

import_types_from "waypoint_navigationTypes.hpp"
import_types_from "base"

task_context "Task" do
    property('ptConfig', 'waypoint_navigation/pathTrackerConfig').
        doc 'Configuration of Path Tracker parameters, namely distances, velocities and turn radius'
    property('pdConfig', 'waypoint_navigation/controllerPDConfig').
        doc 'Configuration of PD alignment controller'
    property('tolHeading', 'double').
        doc 'Default goal heading tolerance (deg).'
    property('tolPos', 'double').
        doc 'Default distance from the goal position tolerance (m).'
    property('repeatCommand','bool')
        doc 'Repeat the same command multiple times'

    input_port("trajectory", "/std/vector</base/Waypoint>").
        doc "Trajectory the robot should follow"

    input_port("pose", "base/samples/RigidBodyState").
        doc "Position and orientation of the Robot"

    input_port("speed_input", "float").
        doc("Optional speed in [m/s] desired for the trajectory following, if not connected, the property is used")

    output_port("motion_command", "base/MotionCommand2D").
        doc "Drive command that should steer the robot to the target Pose"

    output_port("currentWaypoint", "base/Waypoint").
        doc "the waypoint towards which we are currently going"

    output_port("trajectory_status", "int").
        doc "reports the state of the trajectory in execution"


    runtime_states :DRIVING, :ALIGNING, :TARGET_REACHED, :OUT_OF_BOUNDARIES, :NO_TRAJECTORY, :NO_POSE

    needs_configuration
    port_driven
end

task_context "FollowingTest" do
    needs_configuration

    property("start_position", "base/Vector2d").
        doc("(X,Y) initial position of the robot")
    
    property("start_heading", "double").
        doc("Initial heading of the robot in degrees")

    input_port("start_pose", "base/samples/RigidBodyState").
        doc("Override the config start pose from a different component")

    input_port("motion_command", "base/commands/Motion2D").
        doc("Used to calculate the next robot pose")
        
    output_port("robot_pose", "/base/samples/RigidBodyState").
        doc("Moved robot pose")
        
    periodic 1
end

task_context "TrajectoryTest"do
    needs_configuration

    # Properties
    property("selectedWaypoints","/std/vector</int>").
    doc "List containing indexes of selected waypoints"

    property("xpos","/std/vector</double>").
    doc "Lists containing x-coordinates of available waypoints"
    
    property("ypos","/std/vector</double>").
    doc "Lists containing y-coordinates of available waypoints"

    property("goal_heading","double").
    doc "Goal heading of the robot in degrees"
    
    # Output
    output_port("trajectory", "/std/vector</base/Waypoint>").
    doc "Trajectory the robot should follow"
     
end

